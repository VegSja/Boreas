* Boreas
:PROPERTIES:
:CUSTOM_ID: boreas
:END:
Avalanche level prediction API

** Development Requirements
:PROPERTIES:
:CUSTOM_ID: development-requirements
:END:
- Python3.11.0
- Pip
- Poetry (Python Package Manager)

*** M.L Model Environment
:PROPERTIES:
:CUSTOM_ID: m.l-model-environment
:END:
#+begin_src sh
MODEL_PATH=./ml/model/
MODEL_NAME=model.pkl
#+end_src

*** Update =/predict=
:PROPERTIES:
:CUSTOM_ID: update-predict
:END:
To update your machine learning model, add your =load= and =method=
[[file:app/api/routes/predictor.py#L19][change here]] at =predictor.py=

** Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:
#+begin_src sh
python -m venv venv
source venv/bin/activate
make install
#+end_src

** Runnning Localhost
:PROPERTIES:
:CUSTOM_ID: runnning-localhost
:END:
=make run=

** Deploy app
:PROPERTIES:
:CUSTOM_ID: deploy-app
:END:
=make deploy=

** Running Tests
:PROPERTIES:
:CUSTOM_ID: running-tests
:END:
=make test=

** Access Swagger Documentation
:PROPERTIES:
:CUSTOM_ID: access-swagger-documentation
:END:

#+begin_quote
[[http://localhost:8080/docs]]

#+end_quote

** Access Redocs Documentation
:PROPERTIES:
:CUSTOM_ID: access-redocs-documentation
:END:

#+begin_quote
[[http://localhost:8080/redoc]]

#+end_quote

** Project structure
:PROPERTIES:
:CUSTOM_ID: project-structure
:END:
Files related to application are in the =app= or =tests= directories.
Application parts are:

#+begin_example
app
|
| # Fast-API stuff
├── api                 - web related stuff.
│   └── routes          - web routes.
├── core                - application configuration, startup events, logging.
├── models              - pydantic models for this application.
├── services            - logic that is not just crud related.
├── main-aws-lambda.py  - [Optional] FastAPI application for AWS Lambda creation and configuration.
└── main.py             - FastAPI application creation and configuration.
|
| # ML stuff
├── data             - where you persist data locally
│   ├── interim      - intermediate data that has been transformed.
│   ├── processed    - the final, canonical data sets for modeling.
│   └── raw          - the original, immutable data dump.
│
├── notebooks        - Jupyter notebooks. Naming convention is a number (for ordering),
|
├── ml               - modelling source code for use in this project.
│   ├── __init__.py  - makes ml a Python module
│   ├── pipeline.py  - scripts to orchestrate the whole pipeline
│   │
│   ├── data         - scripts to download or generate data
│   │   └── make_dataset.py
│   │
│   ├── features     - scripts to turn raw data into features for modeling
│   │   └── build_features.py
│   │
│   └── model        - scripts to train models and make predictions
│       ├── predict_model.py
│       └── train_model.py
│
└── tests            - pytest
#+end_example

** GCP
:PROPERTIES:
:CUSTOM_ID: gcp
:END:
Deploying inference service to Cloud Run

*** Authenticate
:PROPERTIES:
:CUSTOM_ID: authenticate
:END:
1. Install =gcloud= cli
2. =gcloud auth login=
3. =gcloud config set project <PROJECT_ID>=

*** Enable APIs
:PROPERTIES:
:CUSTOM_ID: enable-apis
:END:
1. Cloud Run API
2. Cloud Build API
3. IAM API

*** Deploy to Cloud Run
:PROPERTIES:
:CUSTOM_ID: deploy-to-cloud-run
:END:
1. Run =gcp-deploy.sh=

*** Clean up
:PROPERTIES:
:CUSTOM_ID: clean-up
:END:
1. Delete Cloud Run
2. Delete Docker image in GCR

** AWS
:PROPERTIES:
:CUSTOM_ID: aws
:END:
Deploying inference service to AWS Lambda

*** Authenticate
:PROPERTIES:
:CUSTOM_ID: authenticate-1
:END:
1. Install =awscli= and =sam-cli=
2. =aws configure=

*** Deploy to Lambda
:PROPERTIES:
:CUSTOM_ID: deploy-to-lambda
:END:
1. Run =sam build=
2. Run `sam deploy --guiChange this portion for other types of models ##
   Add the correct type hinting when completed

=aws cloudformation delete-stack --stack-name <STACK_NAME_ON_CREATION>=

Made by
https://github.com/arthurhenrique/cookiecutter-fastapi/graphs/contributors
with ❤️
